import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'java'
    id 'idea'
    id 'eclipse'
    id 'application'
    id 'org.beryx.jlink' version '2.24.0'
}

group 'com.codedead'
version '1.0.0'

def currentOS = DefaultNativePlatform.currentOperatingSystem

java {
    targetCompatibility = JavaVersion.VERSION_16
    sourceCompatibility = JavaVersion.VERSION_16
}

application {
    mainModule = 'Opal'
    mainClass = 'com.codedead.opal.OpalApplication'
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    forceMerge('log4j-api', 'jackson')
    launcher {
        name = 'Opal'
    }

    if (currentOS.isWindows()) {
        jpackage {
            installerType = 'msi'
            icon = "${project.rootDir}/src/main/resources/images/opal.png"
            installerOptions = [
                    '--win-menu',
                    '--win-shortcut',
                    '--copyright', 'Copyright (c) 2021 CodeDead',
                    '--description', 'Opal is a free and open-source JavaFX application that can play relaxing music in the background',
                    '--vendor', 'CodeDead'
            ]
        }
    }
}

task AppImage() {
    dependsOn jpackageImage
    doLast {
        copy {
            from '.AppImage/.AppDir'
            into "${buildDir}/AppImage/Opal.AppDir"
        }
        copy {
            from "${buildDir}/jpackage/Opal/"
            into "${buildDir}/AppImage/Opal.AppDir/usr/"
        }
        copy {
            from '.AppImage/.AppDir/Opal.png'
            into "${buildDir}/AppImage/Opal.AppDir/usr/lib"
        }

        exec {
            commandLine 'sh', "${project.rootDir}/.AppImage/createAppImage.sh"
        }

        delete "${buildDir}/AppImage/Opal.AppDir"
    }
}

configure(AppImage) {
    group = 'build'
    description = 'Create an AppImage after creating the image of the application'
}

clean.doFirst {
    delete 'default.properties'
    delete 'license.pdf'
    delete 'logs'
}

repositories {
    mavenCentral()
}

def platform
if (currentOS.isWindows()) {
    platform = 'win'
} else if (currentOS.isLinux()) {
    platform = 'linux'
} else if (currentOS.isMacOsX()) {
    platform = 'mac'
}

dependencies {
    implementation "org.openjfx:javafx-base:16:${platform}"
    implementation "org.openjfx:javafx-controls:16:${platform}"
    implementation "org.openjfx:javafx-graphics:16:${platform}"
    implementation "org.openjfx:javafx-fxml:16:${platform}"
    implementation "org.openjfx:javafx-media:16:${platform}"
    implementation "org.apache.logging.log4j:log4j-core:2.14.1"
    implementation "com.fasterxml.jackson.core:jackson-databind:2.12.3"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

test {
    useJUnitPlatform()
}
